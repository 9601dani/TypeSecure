package com.danimo;
import com.danimo.models.*;
import com.danimo.objects.Token;
import java.util.ArrayList;
import java_cup.runtime.Symbol;
import com.danimo.manageError.ObjectErr;
import com.danimo.manageError.TypeSecureError;

class ParserSecure;
parser code {:
        public ParserSecure(SecureLex lexer){
            super(lexer);
        }
       public Symbol scan() throws Exception {
                  Symbol symbol = this.getScanner().next_token();
                  if (symbol == null) {
                      return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
                  }

                  while(symbol != null && symbol.sym == ParserSecureSym.SYM) {
                      this.report_expected_token_ids();
                      System.out.println("Ignorando: " + symbol.value.toString());
                      Token token = (Token) symbol.value;
                     errorForClient.add(new ObjectErr(token.getLexeme(),token.getLine(),token.getColumn(), "LEXICO","No existe esta cadena en el lenguaje"));
                      symbol = this.getScanner().next_token();
                  }

                  if (symbol == null) {
                      return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
                  }

                  return symbol;
          }

          public void report_error(String message, Object info) {
              System.out.println("public void report_error");
          }

          public void report_fatal_error(String message, Object info) {
              System.out.println("public void report_fatal_error");
          }

          public void syntax_error(Symbol cur_token) {
              Token token = (Token) cur_token.value;

              if (cur_token.sym == ParserSecureSym.EOF) {
      //          String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminales.obtenerSimbolos(expected_token_ids()).toString();
                  String er = "Simbolo inesperado";
                 errorForClient.add(new ObjectErr("Se llego al final del archivo sin poder recuperar el error", token.getLine(),token.getColumn(), "SINTACTICO",er));
                  System.out.println(er);
              } else {
                  String er = "Simbolo inesperado";
                  errorForClient.add(new ObjectErr(token.getLexeme(), token.getLine(), token.getColumn(),"SINTACTICO",er));
                  System.out.println(er);
              }
          }

          public void unrecovered_syntax_error(Symbol cur_token) {
              if (cur_token.sym == ParserSecureSym.EOF) {
                  Token tok = (Token) cur_token.value;
                  String er = "Error irrecuperable se llego al final del archivo";
                  errorForClient.add(new ObjectErr("Se llego al final del archivo sin poder recuperar el error", tok.getLine(), tok.getColumn(), "SINTACTICO", er));
                  System.out.println(er);
              } else {
                  Token tok = (Token) cur_token.value;
                  //String er = "Error irrecuperable, un posible simbolo esperado: "+ simbolosTerminales.obtenerSimbolos(expected_token_ids()).toString();
                  String er = "Error irrecuperable resuelva el error anterior";
                  errorForClient.add(new ObjectErr(tok.getLexeme(), tok.getLine(), tok.getColumn(), "SINTACTICO", er));
                  System.out.println(er);
              }
          }

          public Variable.TypeV returnTypeV(String data){
                if(data.equalsIgnoreCase("CONST")){
                    return Variable.TypeV.CONST;
                }else if(data.equalsIgnoreCase("LET")){
                    return Variable.TypeV.LET;
                }
                return null;
          }
          public Cast.CastType returnTypeCast(String data){
                if(data.equalsIgnoreCase("NUMBER")){
                    return Cast.CastType.NUMBER;
                }else if(data.equalsIgnoreCase("BIGINT")){
                    return Cast.CastType.BIGINT;
                }else if(data.equalsIgnoreCase("BOOLEAN")){
                    return Cast.CastType.BOOLEAN;
                }else if(data.equalsIgnoreCase("STRING")){
                    return Cast.CastType.STRING;
                }
                return null;
          }
          public MethodString.MethodType returnTypeMethodString(String data){
                if(data.equalsIgnoreCase(".TOLOWERCASE()")){
                    return MethodString.MethodType.LOWERCASE;
                }else if(data.equalsIgnoreCase(".TOUPPERCASE()")){
                    return MethodString.MethodType.UPPERCASE;
                }else if(data.equalsIgnoreCase(".CONCAT")){
                    return MethodString.MethodType.CONCAT;
                }else if(data.equalsIgnoreCase(".LENGTH")){
                    return MethodString.MethodType.LENGTH;
                }else if(data.equalsIgnoreCase(".CHARAT")){
                    return MethodString.MethodType.CHARAT;
                }
                return null;
          }


:}
/*terminales para declare*/
terminal Token PUNTO_COMA,COMA,DOS_PUNTOS,IGUAL,CONST,LET;
/*operaciones*/
terminal Token OR,AND,NOT,DISTINTO_QUE,MENOR_QUE,MENOR_IGUAL_QUE,MAYOR_QUE,MAYOR_IGUAL_QUE,DOBLE_IGUAL
          ,MAS, MENOS,MULTIPLY,DIVIDE,BIG_INT,ENTERO,NUM_DECIMAL,CADENA,FALSE,TRUE,LITERAL,L_PARENT,R_PARENT;
terminal Token T_NUMBER,T_BIGINT,T_STRING,T_BOOLEAN,T_VOID,T_UNDEFINED,CONSOLE,F_NUMBER,F_BIGINT,F_BOOLEAN,F_STRING,LENGTH,
CHARAT,TO_LOWER_CASE,TO_UPPER_CASE,CONCAT,IF,ELSE,FOR,WHILE,DO,BREAK,CONTINUE,FUNCTION,RETURN,MATH_E,MATH_PI,MATH_SQRT2,
MATH_ABS,MATH_CEIL,MATH_COS,MATH_SIN,MATH_TAN,MATH_EXP,MATH_FLOOR,MATH_POW,MATH_SQRT,MATH_RANDOM,PRINT_AST,GET_SYMBOL_TABLE,
SYM,ERROR,MOD,MAS_MAS,MENOS_MENOS, L_LLAVE, R_LLAVE;
nonterminal instruccion,type,type_f,settear,a,method_string,method_math,type_method_string,parame,
            b,c,d,e,f,g,h,i,if_pro,while_pro,console_pro,else_pro,for_pro,continue_pro,break_pro,return_pro
            , do_while_pro,sumadores_pro,assignacion_pro,assig_pro,funtion_pro, call_funtion, declare_for;
nonterminal Ast inic;
nonterminal  Declare declare_pro;
nonterminal ArrayList<Parametro> parametros;
nonterminal ArrayList<Instruccion> instrucciones, declare,expr,expr2,call_f,array_assig_pro, recursividad;
start with inic;

inic ::=
        instrucciones:a
        {:
            Ast.getInstancia().setArbol_ast(((ArrayList<Instruccion>) a));
            RESULT= Ast.getInstancia();
        :}
;

instrucciones ::=
                    instrucciones:a instruccion:b
                    {:
                    RESULT= a;
                    if(b!=null){
                        ((ArrayList<Instruccion>)a).add((Instruccion)b);
                    }
                    :}
				 |  instruccion:b
				    {:
				       RESULT= new ArrayList<Instruccion>();
				       if(b!=null){
                          RESULT.add((Instruccion)b);
                       }

				    :}
;

instruccion ::=
                    declare_pro:pro PUNTO_COMA {:RESULT = pro; :}
                |   console_pro:pro {:RESULT = pro;:}
				|   settear:pro {:RESULT = pro;:}
				|   if_pro:pro  {:RESULT = pro;:}
				|   for_pro:pro {:RESULT = pro;:}
				|   do_while_pro:pro    {:RESULT = pro;:}
				|   while_pro:pro   {:RESULT = pro;:}
				|   sumadores_pro:pro PUNTO_COMA    {:RESULT = pro;:}
				|   funtion_pro:pro {:RESULT = pro;:}
				|   call_funtion:pro PUNTO_COMA      {:RESULT = pro;:}
				|   assig_pro:pro PUNTO_COMA {:RESULT= pro;:}
				|   return_pro:pro PUNTO_COMA {:RESULT= pro;:}
				|   continue_pro:pro PUNTO_COMA {:RESULT=pro;:}
				|   break_pro:pro   PUNTO_COMA {:RESULT=pro;:}
				|   error PUNTO_COMA
;

declare_pro ::=
            type_f:a declare:b
                {:
                            RESULT = new Declare(((Token)a).getLine(),((Token)a).getColumn(),returnTypeV(((Token)a).getLexeme()), (ArrayList<Instruccion>)b);
                :}
;
declare_for::=
                type_f:a assignacion_pro:b
{:
ArrayList<Instruccion> array= new ArrayList<>();
array.add((Instruccion)b);
RESULT = new Declare(((Token)a).getLine(),((Token)a).getColumn(),returnTypeV(((Token)a).getLexeme()), array);
;:}
;
declare ::= declare:c COMA assignacion_pro:b
               {:
                ((ArrayList<Instruccion>)c).add((Instruccion)b);
                RESULT= c;
               :}
		|	assignacion_pro:b
		        {:
		         RESULT= new ArrayList<Instruccion>();
                 RESULT.add((Assingment)b);
		        :}
;

assignacion_pro ::=
                LITERAL:id DOS_PUNTOS type:type IGUAL a:pro1
                {:
                /*RESULT = new Assingment(((Token)id).getLine(),((Token)id).getColumn(), id.getLexeme(),(Variable.VariableType)type, (Instruccion) instruccion);*/
                                RESULT = new Assingment(((Token)id).getLine(),((Token)id).getColumn(), id.getLexeme(),(Variable.VariableType)type, (Instruccion) pro1);
                :}
			| 	LITERAL:id DOS_PUNTOS type:type
			    {:
                RESULT = new Assingment(((Token)id).getLine(),((Token)id).getColumn(), id.getLexeme(),(Variable.VariableType)type,null);
			    :}
			|   LITERAL:id IGUAL a:pro1
			    {:
                RESULT = new Assingment(((Token)id).getLine(),((Token)id).getColumn(), id.getLexeme(),Variable.VariableType.DEFINIRLA, (Instruccion) pro1);
			    :}
			|   LITERAL:id IGUAL call_funtion
;
array_assig_pro::=
        array_assig_pro:prod COMA assig_pro:prod1
        {:
        ((ArrayList<Instruccion>)prod).add((Instruccion)prod1);
        RESULT= prod;
        :}
        | assig_pro:prod
        {:
        RESULT= new ArrayList<Instruccion>();
        RESULT.add((Instruccion)prod);
        :}
;
assig_pro ::=
			|   LITERAL:id IGUAL a:pro1
			    {:
                RESULT = new OnlyAssingment(((Token)id).getLine(),((Token)id).getColumn(), id.getLexeme(),Variable.VariableType.DEFINIRLA, (Instruccion) pro1);
			    :}
			|   LITERAL:id IGUAL call_funtion
;

type ::=  T_NUMBER {: RESULT= Variable.VariableType.NUMBER;:}
	    | T_BIGINT {: RESULT= Variable.VariableType.BIGINT;:}
	    | T_STRING {: RESULT= Variable.VariableType.STRING;:}
		| T_BOOLEAN {: RESULT= Variable.VariableType.BOOLEAN;:}
		| T_VOID {: RESULT= Variable.VariableType.VOID;:}
		| T_UNDEFINED {: RESULT= Variable.VariableType.UNDEFINED;:}
		|

;

type_f ::=	CONST:a {:RESULT = ((Token)a);:}
		   | LET:a  {:RESULT = (Token)a;:}
;

console_pro ::=
            CONSOLE:pro L_PARENT expr:pro2 R_PARENT PUNTO_COMA
            {:RESULT = new ConsoleLog(pro.getLine(), pro.getColumn(),(ArrayList<Instruccion>)pro2 );:}
          | CONSOLE:pro L_PARENT call_funtion:pro2 R_PARENT PUNTO_COMA
            {:RESULT = new ConsoleLog(pro.getLine(), pro.getColumn(),(ArrayList<Instruccion>)pro2 );:}
;
expr ::=
        expr:prod COMA a:prod1
        {:
        ((ArrayList<Instruccion>)prod).add((Instruccion)prod1);
        RESULT= prod;
        :}
        | a:prod
        {:
        RESULT= new ArrayList<Instruccion>();
        RESULT.add((Instruccion)prod);
        :}
;
if_pro ::= IF:pro_if L_PARENT a:pi2 R_PARENT L_LLAVE instrucciones:pi4 R_LLAVE else_pro:pi5
{:RESULT= new IfState(pro_if.getLine(), pro_if.getColumn(),(Instruccion)pi2,(ArrayList<Instruccion>)pi4,(Instruccion)pi5);:}
          |  IF:pro_if L_PARENT a:pi2 R_PARENT L_LLAVE R_LLAVE else_pro:pi5
{:RESULT = new IfState(pro_if.getLine(), pro_if.getColumn(),(Instruccion)pi2,null,(Instruccion)pi5);:}
;
else_pro ::=
            ELSE:pro_else IF L_PARENT a:pro2 R_PARENT L_LLAVE instrucciones:pro4 R_LLAVE else_pro: pro5
{:RESULT = new IfState(pro_else.getLine(), pro_else.getColumn(), (Instruccion)pro2, (ArrayList<Instruccion>)pro4, (Instruccion)pro5);:}
          | ELSE:pro_else L_LLAVE instrucciones:pro2 R_LLAVE
{:RESULT = new ElseState(pro_else.getLine(), pro_else.getColumn(), (ArrayList<Instruccion>)pro2);:}
          |
;

for_pro ::=
           FOR:id L_PARENT declare_pro:decla PUNTO_COMA a:compare PUNTO_COMA sumadores_pro:incre  R_PARENT L_LLAVE instrucciones:instr R_LLAVE
{:  ArrayList<Instruccion> array= new ArrayList<>();
    array.add((Instruccion)decla);
    RESULT= new ForState(((Token)id).getLine(), ((Token)id).getColumn(),array,(Instruccion)compare,(Instruccion)incre,(ArrayList<Instruccion>)instr);
:}
         |  FOR:id L_PARENT declare_pro:decla PUNTO_COMA a:compare PUNTO_COMA sumadores_pro:incre  R_PARENT L_LLAVE  R_LLAVE
{:  ArrayList<Instruccion> array= new ArrayList<>();
    array.add((Instruccion)decla);
    RESULT= new ForState(((Token)id).getLine(), ((Token)id).getColumn(),array,(Instruccion)compare,(Instruccion)incre,null);
:}
         |  FOR:id L_PARENT array_assig_pro:decla PUNTO_COMA a:compare PUNTO_COMA sumadores_pro:incre  R_PARENT L_LLAVE instrucciones:instr R_LLAVE
{:RESULT= new ForState(((Token)id).getLine(), ((Token)id).getColumn(),(ArrayList<Instruccion>)decla,(Instruccion)compare,(Instruccion)incre,(ArrayList<Instruccion>)instr);:}
         |  FOR:id L_PARENT array_assig_pro:decla PUNTO_COMA a:compare PUNTO_COMA sumadores_pro:incre  R_PARENT L_LLAVE  R_LLAVE
{:RESULT= new ForState(((Token)id).getLine(), ((Token)id).getColumn(),(ArrayList<Instruccion>)decla,(Instruccion)compare,(Instruccion)incre,null);:}
;
while_pro ::=
            WHILE:prod L_PARENT a:prod3 R_PARENT L_LLAVE instrucciones:prod6 R_LLAVE
{:RESULT=new While(prod.getLine(), prod.getColumn(),(Instruccion)prod3, (ArrayList<Instruccion>)prod6 );:}
           | WHILE:prod L_PARENT a:prod3 R_PARENT L_LLAVE  R_LLAVE
{:RESULT=new While(prod.getLine(), prod.getColumn(),(Instruccion)prod3, null );:}

;

do_while_pro::=
             DO:prod L_LLAVE instrucciones:prod6  R_LLAVE WHILE L_PARENT  a:prod3 R_PARENT PUNTO_COMA
{:RESULT=new DoWhile(prod.getLine(), prod.getColumn(),(Instruccion)prod3, (ArrayList<Instruccion>)prod6 );:}
           | DO:prod L_LLAVE  R_LLAVE WHILE L_PARENT  a:prod3 R_PARENT PUNTO_COMA
{:RESULT=new DoWhile(prod.getLine(), prod.getColumn(),(Instruccion)prod3, null );:}
;
funtion_pro ::=
               FUNCTION:prod LITERAL:id L_PARENT parametros:param R_PARENT DOS_PUNTOS type:pro_tipo L_LLAVE instrucciones:prod1 R_LLAVE
{:RESULT= new Function(((Token)prod).getLine(), ((Token)prod).getColumn(),((Token)id).getLexeme(),(ArrayList<Parametro>)param,(ArrayList<Instruccion>)prod1, (Variable.VariableType)pro_tipo);:}
               |  FUNCTION:prod LITERAL:id L_PARENT parametros:param R_PARENT  L_LLAVE instrucciones:prod1 R_LLAVE
{:RESULT= new Function(((Token)prod).getLine(), ((Token)prod).getColumn(),((Token)id).getLexeme(),(ArrayList<Parametro>)param,(ArrayList<Instruccion>)prod1, Variable.VariableType.VOID);:}
               |  FUNCTION:prod LITERAL:id L_PARENT parametros:param R_PARENT  L_LLAVE R_LLAVE
{:RESULT= new Function(((Token)prod).getLine(), ((Token)prod).getColumn(),((Token)id).getLexeme(),(ArrayList<Parametro>)param,null, Variable.VariableType.VOID);:}
;
parametros ::=
              parametros:prod COMA parame:prod1
               {:
                     ((ArrayList<Parametro>)prod).add((Parametro)prod1);
                     RESULT= prod;
               :}
              | parame:prod
              {:
                    RESULT= new ArrayList<Parametro>();
                    RESULT.add((Parametro)prod);
              :}
;
parame ::=
             LITERAL:id DOS_PUNTOS type:pro {: RESULT= new Parametro(((Token)id).getLine(), ((Token)id).getColumn(), ((Token)id).getLexeme(), (Variable.VariableType)pro);:}
            |
;
call_funtion::=
                LITERAL:id L_PARENT call_f:asig R_PARENT
{:RESULT= new Call(((Token)id).getLine(),((Token)id).getColumn(),((Token)id).getLexeme(), (ArrayList<Instruccion>)asig);:}
              |  LITERAL:id L_PARENT R_PARENT
{:RESULT= new Call(((Token)id).getLine(),((Token)id).getColumn(),((Token)id).getLexeme(), null);:}
;
call_f::=
         call_f:c COMA a:b
         {:
                         ((ArrayList<Instruccion>)c).add((Instruccion)b);
                         RESULT= c;
         :}
       | a:b
          {:
         		         RESULT= new ArrayList<Instruccion>();
                          RESULT.add((Value)b);
         :}
;
sumadores_pro::=
            LITERAL:id MAS_MAS
{:RESULT= new OperacionBinaria(((Token)id).getLine(),((Token)id).getColumn(),OperationType.MAS_MAS,((Instruccion)new Value(id.getLine(),id.getColumn(), id.getLexeme(),Value.ValueType.LITERAL)),null);:}
          | LITERAL:id MENOS_MENOS
{:RESULT= new OperacionBinaria(((Token)id).getLine(),((Token)id).getColumn(),OperationType.MENOS_MENOS,((Instruccion)new Value(id.getLine(),id.getColumn(), id.getLexeme(),Value.ValueType.LITERAL)),null);:}
;

continue_pro::=
    CONTINUE :conti {:RESULT = new Continue(((Token)conti).getLine(),((Token)conti).getColumn());:}
;
break_pro::=
    BREAK:brea {:RESULT= new Break(((Token)brea).getLine(), ((Token)brea).getColumn());:}
;
return_pro::=
        RETURN:retu {:RESULT=new Return(((Token)retu).getLine(),((Token)retu).getColumn(), null);:}
        | RETURN:retu a:dp {:RESULT=new Return(((Token)retu).getLine(),((Token)retu).getColumn(),(Instruccion)dp);:}
;

a ::= a:pro1 OR b:pro2
{:RESULT = new OperacionBinaria(((Instruccion)pro1).getLine(),((Instruccion)pro1).getColumn(),OperationType.OR,(Instruccion)pro1,(Instruccion)pro2);:}
	| b:pro1
{:RESULT = pro1;:}
;

b ::= b:pro1 AND c:pro2
{:RESULT = new OperacionBinaria(((Instruccion)pro1).getLine(),((Instruccion)pro1).getColumn(),OperationType.AND,(Instruccion)pro1,(Instruccion)pro2);:}
	| c:pro1
{:RESULT = pro1;:}
;

c ::= NOT c:pro1
{:RESULT = new OperacionBinaria(((Instruccion)pro1).getLine(),((Instruccion)pro1).getColumn(),OperationType.NOT,(Instruccion)pro1,(Instruccion)pro1);:}
	| d:pro1
{:RESULT = pro1;:}
;

d ::= d:pro1 DISTINTO_QUE e:pro2
{:RESULT = new OperacionBinaria(((Instruccion)pro1).getLine(),((Instruccion)pro1).getColumn(),OperationType.DISTINTO_QUE,(Instruccion)pro1,(Instruccion)pro2);:}
	| d:pro1 MENOR_QUE e:pro2
{:RESULT = new OperacionBinaria(((Instruccion)pro1).getLine(),((Instruccion)pro1).getColumn(),OperationType.MENOR_QUE,(Instruccion)pro1,(Instruccion)pro2);:}
	| d:pro1 MENOR_IGUAL_QUE e:pro2
{:RESULT = new OperacionBinaria(((Instruccion)pro1).getLine(),((Instruccion)pro1).getColumn(),OperationType.MENOR_IGUAL_QUE,(Instruccion)pro1,(Instruccion)pro2);:}
	| d:pro1 MAYOR_QUE e:pro2
{:RESULT = new OperacionBinaria(((Instruccion)pro1).getLine(),((Instruccion)pro1).getColumn(),OperationType.MAYOR_QUE,(Instruccion)pro1,(Instruccion)pro2);:}
	| d:pro1 MAYOR_IGUAL_QUE e:pro2
{:RESULT = new OperacionBinaria(((Instruccion)pro1).getLine(),((Instruccion)pro1).getColumn(),OperationType.MAYOR_IGUAL_QUE,(Instruccion)pro1,(Instruccion)pro2);:}
	| d:pro1 DOBLE_IGUAL e:pro2
{:RESULT = new OperacionBinaria(((Instruccion)pro1).getLine(),((Instruccion)pro1).getColumn(),OperationType.DOBLE_IGUAL,(Instruccion)pro1,(Instruccion)pro2);:}
	| e:pro1 {:RESULT= pro1;:}
;
e ::=  	e:pro1 MAS f:pro2
{:RESULT = new OperacionBinaria(((Instruccion)pro1).getLine(),((Instruccion)pro1).getColumn(),OperationType.MAS,(Instruccion)pro1,(Instruccion)pro2);:}
	 |	e:pro1 MENOS f:pro2
{:RESULT = new OperacionBinaria(((Instruccion)pro1).getLine(),((Instruccion)pro1).getColumn(),OperationType.MENOS,(Instruccion)pro1,(Instruccion)pro2);:}
	 |	f:pro1 {:RESULT = pro1;:}
;
f ::=  	f:pro1 MULTIPLY g:pro2
{:RESULT = new OperacionBinaria(((Instruccion)pro1).getLine(),((Instruccion)pro1).getColumn(),OperationType.MULTIPLY,(Instruccion)pro1,(Instruccion)pro2);:}
	 |	f:pro1 DIVIDE g:pro2
{:RESULT = new OperacionBinaria(((Instruccion)pro1).getLine(),((Instruccion)pro1).getColumn(),OperationType.DIVIDE,(Instruccion)pro1,(Instruccion)pro2);:}
	 |  f:pro1 MOD g:pro2
{:RESULT = new OperacionBinaria(((Instruccion)pro1).getLine(),((Instruccion)pro1).getColumn(),OperationType.MOD,(Instruccion)pro1,(Instruccion)pro2);:}
	 |	g:pro1 {:RESULT = pro1;:}
;
g::= F_NUMBER:pro1 L_PARENT a:pro2 R_PARENT {:RESULT= new Cast(((Token)pro1).getLine(),((Token) pro1).getColumn(),returnTypeCast(((Token)pro1).getLexeme()),((Instruccion)pro2));:}
       | F_BIGINT:pro1 L_PARENT a:pro2 R_PARENT {:RESULT= new Cast(((Token)pro1).getLine(),((Token) pro1).getColumn(),returnTypeCast(((Token)pro1).getLexeme()),((Instruccion)pro2));:}
       | F_BOOLEAN:pro1 L_PARENT a:pro2 R_PARENT {:RESULT= new Cast(((Token)pro1).getLine(),((Token) pro1).getColumn(),returnTypeCast(((Token)pro1).getLexeme()),((Instruccion)pro2));:}
       | F_STRING:pro1  L_PARENT a:pro2 R_PARENT {:RESULT= new Cast(((Token)pro1).getLine(),((Token) pro1).getColumn(),returnTypeCast(((Token)pro1).getLexeme()),((Instruccion)pro2));:}
       | method_math:pro1 {:RESULT=pro1;:}
;
method_math ::=
                MATH_E:prod {:RESULT= new MethodMath(((Token)prod).getLine(), ((Token)prod).getColumn(),MethodMath.TypeMath.E,null,null);:}
              | MATH_PI:prod {:RESULT= new MethodMath(((Token)prod).getLine(), ((Token)prod).getColumn(),MethodMath.TypeMath.PI,null,null);:}
              | MATH_SQRT2:prod {:RESULT= new MethodMath(((Token)prod).getLine(), ((Token)prod).getColumn(),MethodMath.TypeMath.SQRT2,null,null);:}
              | MATH_ABS:prod h:prod2 {:RESULT= new MethodMath(((Token)prod).getLine(), ((Token)prod).getColumn(),MethodMath.TypeMath.ABS,(Instruccion)prod2,null);:}
              | MATH_CEIL:prod h:prod2 {:RESULT= new MethodMath(((Token)prod).getLine(), ((Token)prod).getColumn(),MethodMath.TypeMath.CEIL,(Instruccion)prod2,null);:}
              | MATH_COS:prod h:prod2 {:RESULT= new MethodMath(((Token)prod).getLine(), ((Token)prod).getColumn(),MethodMath.TypeMath.COS,(Instruccion)prod2,null);:}
              | MATH_SIN:prod h:prod2 {:RESULT= new MethodMath(((Token)prod).getLine(), ((Token)prod).getColumn(),MethodMath.TypeMath.SIN,(Instruccion)prod2,null);:}
              | MATH_TAN:prod h:prod2 {:RESULT= new MethodMath(((Token)prod).getLine(), ((Token)prod).getColumn(),MethodMath.TypeMath.TAN,(Instruccion)prod2,null);:}
              | MATH_EXP:prod h:prod2 {:RESULT= new MethodMath(((Token)prod).getLine(), ((Token)prod).getColumn(),MethodMath.TypeMath.EXP,(Instruccion)prod2,null);:}
              | MATH_FLOOR:prod h:prod2 {:RESULT= new MethodMath(((Token)prod).getLine(), ((Token)prod).getColumn(),MethodMath.TypeMath.FLOOR,(Instruccion)prod2,null);:}
              | MATH_POW:prod L_PARENT a:prod2 COMA a:prod3 R_PARENT {:RESULT= new MethodMath(((Token)prod).getLine(), ((Token)prod).getColumn(),MethodMath.TypeMath.POW,(Instruccion)prod2,(Instruccion)prod3);:}
              | MATH_SQRT:prod L_PARENT a:prod2 COMA a:prod3 R_PARENT {:RESULT= new MethodMath(((Token)prod).getLine(), ((Token)prod).getColumn(),MethodMath.TypeMath.SQRT,(Instruccion)prod2,null);:}
              | MATH_RANDOM:prod  {:RESULT= new MethodMath(((Token)prod).getLine(), ((Token)prod).getColumn(),MethodMath.TypeMath.RANDOM,null,null);:}
              | method_string:prod1 {:RESULT = prod1;:}
;
method_string ::=
                h:id type_method_string:prod2 {:RESULT = new MethodString(((Value)id).getLine(), ((Value)id).getColumn(),((Value)id).getValue().toString(),returnTypeMethodString(((Token)prod2).getLexeme()),null);:}
                | h:id CHARAT L_PARENT a:prod R_PARENT   {:RESULT = new MethodString(((Value)id).getLine(), ((Value)id).getColumn(),((Value)id).getValue().toString(), MethodString.MethodType.CHARAT,(Instruccion)prod);:}
                | h:id CONCAT L_PARENT a:prod R_PARENT   {:RESULT = new MethodString(((Value)id).getLine(), ((Value)id).getColumn(),((Value)id).getValue().toString(), MethodString.MethodType.CONCAT,(Instruccion)prod);:}
              // produccion si viene mas de un concat
                |h:prod1 {:RESULT = prod1;:}
;
type_method_string ::=
                    TO_LOWER_CASE:prod {:RESULT=((Token)prod);:}
                 |  TO_UPPER_CASE:prod {:RESULT=((Token)prod);:}
                 |  LENGTH :prod        {:RESULT=((Token)prod);:}
;

h ::= MENOS i:pro1
{:RESULT = new OperacionBinaria(((Instruccion)pro1).getLine(),((Instruccion)pro1).getColumn(),OperationType.MENOS_UNARIO,(Instruccion)pro1,(Instruccion)pro1);:}
  | MAS i:pro1
{:RESULT = new OperacionBinaria(((Instruccion)pro1).getLine(),((Instruccion)pro1).getColumn(),OperationType.MAS_UNARIO,(Instruccion)pro1,(Instruccion)pro1);:}
  | i:pro1   {:RESULT=pro1;:}
;
i ::=  BIG_INT:id {: RESULT= new Value(id.getLine(),id.getColumn(), id.getLexeme(),Value.ValueType.BIG_INT);:}
	|ENTERO:id    {:RESULT= new Value(id.getLine(),id.getColumn(), id.getLexeme(),Value.ValueType.ENTERO); :}
    | NUM_DECIMAL:id {:RESULT= new Value(id.getLine(),id.getColumn(), id.getLexeme(),Value.ValueType.NUM_DECIMAL); :}
    | CADENA:id      {:RESULT= new Value(id.getLine(),id.getColumn(), id.getLexeme(),Value.ValueType.CADENA); :}
    | FALSE:id       {:RESULT= new Value(id.getLine(),id.getColumn(), id.getLexeme(),Value.ValueType.BOOLEAN); :}
    | TRUE:id        {:RESULT= new Value(id.getLine(),id.getColumn(), id.getLexeme(),Value.ValueType.BOOLEAN); :}
    | LITERAL:id     {:RESULT= new Value(id.getLine(),id.getColumn(), id.getLexeme(),Value.ValueType.LITERAL); :}
/*    | call_funtion:pro {:RESULT=pro;:}*/
    | L_PARENT a:id R_PARENT {:RESULT= id; :}
/*    | call_funtion:pp {:RESULT= pp;:}*/
;